//------------------------------------------
// Basic Operators
//------------------------------------------

//------------------------------------------
    // Unary operators
    /*
    +: Unary plus
    -: Unary minus
    !: Logical NOT
    ~: Bitwise NOT
    ...: Open-ended partial range
    ..<: Closed partial range
    */

//------------------------------------------
    //prefix

var myPrefixUnary = true

print(!myPrefixUnary) // ans: false

let UnaryMinusA = 5 // ans: 5
let UnaryMinusB = -UnaryMinusA // ans:-5
let UnaryMinusC = -42 // ans: -42
print(UnaryMinusA, UnaryMinusB, UnaryMinusC)

    //postfix

let UnaryPostfixfruits = ["apple", "banana", "mango", "üçä", "üçã"]
print(UnaryPostfixfruits[3...]) // ans: ["üçä", "üçã"]


    // Binary operators
    var BinaryOperatorsBasket = "mango"
BinaryOperatorsBasket = BinaryOperatorsBasket + ", banana" + ", üçä"
print(BinaryOperatorsBasket) // ans: mango, banana, üçä

    // Ternary operators
    /* ‡∏à‡∏∞‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ if, else ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Boolean ‡πÅ‡∏•‡πâ‡∏ß return ‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ô 1 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    Syntax:
    condition ? true : false
    ‡∏´‡∏£‡∏∑‡∏≠
    condition ? expression1 : expression2
    ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤
    ‡∏ñ‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô "‡∏à‡∏£‡∏¥‡∏á" ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô expression1
    ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô "‡πÄ‡∏ó‡πá‡∏à" ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô expression2
    */

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ if condition

let IfTernaryCriteriaScore = 60
var IfTernaryScore = ""

if (IfTernaryCriteriaScore >= 60){
    IfTernaryScore = "pass"
}else{
    IfTernaryScore = "fail"
}

print("you " + IfTernaryScore) // ans: you pass

// ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á Ternary Operators ‡πÑ‡∏î‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ

let TernaryCriteriaScore = 60

let TernaryScore = (TernaryCriteriaScore >= 60) ? "pass" : "fail"

print("you " + TernaryScore) // ans: you pass

//------------------------------------------
// Assignment Operator
//------------------------------------------

var elevenVariable = 11

var modElevenVariable = elevenVariable % 3 

print(modElevenVariable) // ans: 2

var red: String = "Red"
// red = nil // *error*


// swap
var swapA = 5 
var swapB = 4 
print(swapA, swapB) // ans: 5 4
(swapB, swapA) = (swapA, swapB)
print(swapA, swapB) // ans: 4 5


var optionalVariable: String?
optionalVariable = "OptionalStringNameValue"
print(optionalVariable) // ans: Optional("OptionalStringNameValue")

/* ‡πÉ‡∏ô swift ‡∏Å‡∏≤‡∏£ assign ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£ return ‡πÄ‡∏ä‡πà‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á if x = y ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏õ‡πá‡∏ô boolean ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô if x == y
*/

var variableOne = 1
var variableTwo = 2

var innitialValueOptional: Int?
var initialValueTen = 10
print(type(of:(innitialValueOptional))) // ans: Optional<Int>
print(type(of:(initialValueTen))) // ans: Int

innitialValueOptional = 10
print(innitialValueOptional) // ans: Optional(10)
innitialValueOptional = innitialValueOptional! + initialValueTen
print(innitialValueOptional) // ans: Optional(20)
innitialValueOptional = initialValueTen
print(innitialValueOptional) // ans: Optional(10)


print( (variableOne == variableTwo) ? "1 == 2" : "1 != 2" ) // ans: 1 != 2


//------------------------------------------
// Arithmetic Operators
//------------------------------------------
/* 
    Addition (+) | 5 + 2 = 7
    Subtraction (-) | 4 - 2 = 2
    Multiplication (*) | 2 * 3 = 6
    Division (/) | 4 / 2 = 2
    Modulo (%) | 5 % 2 = 1 
    
    Overflow addition (&+)
    Overflow subtraction (&-)
    Overflow multiplication (&*)

*/

    //------------------------------------------
    // Addition
    //------------------------------------------

var (ArithmeticVariableA, ArithmeticVariableB) = (7, 2)
var unsignedOverflow = UInt8.max // 255


ArithmeticVariableA += ArithmeticVariableB // 7+2
print(ArithmeticVariableA) // ans: 9

print("con" + "cat") // ans: concat

unsignedOverflow = unsignedOverflow &+ 1 // Uint8.max overflow +1
print(unsignedOverflow) // ans: 0


//‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ UInt8 ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô 250
unsignedOverflow = 250

// ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡∏°
// var innitialValueOptional: Int?
// var initialValueTen = 10
initialValueTen += 10 
print(initialValueTen) // ans: 20
// innitialValueOptional += innitialValueOptional // *error*
innitialValueOptional! += innitialValueOptional!
print(innitialValueOptional) // ans: Optional(20)


// ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á &+ 10 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ overflow ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
unsignedOverflow = unsignedOverflow &+ 10
print(unsignedOverflow) // ans: 4
/*‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤ 4 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ß‡πà‡∏≤
1.‡∏ô‡∏≥‡∏Ñ‡πà‡∏≤ 10 ‡∏°‡∏≤‡∏ö‡∏ß‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏¥‡∏° ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô 250 + 5 ‡∏à‡∏∞‡πÑ‡∏î‡πâ 255 ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏∏‡∏™‡∏î‡∏Ç‡∏≠‡∏á UInt8
2.‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á &+ ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î overflow ‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 5(10-5) ‡∏à‡∏∂‡∏á‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ö‡∏ß‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô 255 ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ max ‡∏Ç‡∏≠‡∏á UInt8
3.‡∏ô‡∏≥‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠(5)‡∏°‡∏≤‡∏ö‡∏ß‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ 1 ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô 0 1 2 3 4 ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
*/

    //------------------------------------------
    // Subtraction
    //------------------------------------------

ArithmeticVariableA -= ArithmeticVariableB // 9-2
print(ArithmeticVariableA) // ans: 7
// print("con" - "cat") // *error*

unsignedOverflow = UInt8.min // 0
unsignedOverflow = unsignedOverflow &- 1 // 0 overflow -1
print(unsignedOverflow) // ans: 255


initialValueTen = 20
initialValueTen -= 10 
print(initialValueTen) // ans: 10

innitialValueOptional = 20
// innitialValueOptional -= innitialValueOptional // *error*
innitialValueOptional! -= innitialValueOptional!
print(innitialValueOptional) // ans: Optional(0)

    //------------------------------------------
    // Multiplication
    //------------------------------------------

ArithmeticVariableA *= ArithmeticVariableB // 7*2
print(ArithmeticVariableA) //ans: 14
// print("con" * "cat") // *error*

initialValueTen = 10
initialValueTen *= 10 
print(initialValueTen) // ans: 100

innitialValueOptional = 10
innitialValueOptional! *= innitialValueOptional!
// innitialValueOptional *= innitialValueOptional // *error*
print(innitialValueOptional) // ans: Optional(100)


    //------------------------------------------
    // Division
    //------------------------------------------

ArithmeticVariableA /= ArithmeticVariableB // 14/2
print(ArithmeticVariableA) // ans: 3

print(7/3) // ans: 2
print(7.0/3.0) // ans: 2.3333


initialValueTen = 100
initialValueTen /= 10 
print(initialValueTen) // ans: 10

innitialValueOptional = 100
innitialValueOptional! /= innitialValueOptional!
// innitialValueOptional /= innitialValueOptional // *error*
print(innitialValueOptional) // ans: Optional(1)

    //------------------------------------------
    // Modulo
    //------------------------------------------

ArithmeticVariableA %= ArithmeticVariableB // 3%2
print(ArithmeticVariableA) // ans: 1
// print("con" % "cat") // *error*

initialValueTen = 100
innitialValueOptional = 100
initialValueTen %= 9
innitialValueOptional! %= 9
print(initialValueTen) // ans: 1
print(innitialValueOptional) // ans: Optional(1)

//------------------------------------------
// Remainder Operator
//------------------------------------------
// ‡∏à‡∏∞‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö Modulo ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢
// Remainder operator (a % b) ‡πÉ‡∏ä‡πâ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ b ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏π‡∏ì‡∏Å‡∏µ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö a ‡πÅ‡∏•‡∏∞ return ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡∏°‡∏≤

let myMinus = -15 / 2 // -7

let myRemainder = -15 % 2 // ‡∏à‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á (7 * -2) + (-1)
//ans : -1

print((2 * myMinus) + myRemainder) // (2 * -7) + (-15)
// ans: -15

// ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á a % b ‡πÅ‡∏•‡∏∞ a % -b ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
// ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤ b ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô (+) ‡∏´‡∏£‡∏∑‡∏≠ (-) ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
// ‡∏à‡∏∞‡∏™‡∏ô‡πÉ‡∏à‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß a
var myRemindA = 14
var myRemindB = 3
print(myRemindA % myRemindB) // ans: 2
print(myRemindA % -myRemindB) // ans: 2
print(-myRemindA % myRemindB) // ans: -2
print(-myRemindA % -myRemindB) // ans: -2

for i in 1...6 {
    if i % 2 == 0 {
        print("Number is even")
    } else {
        print("Number is odd")
    }
}
/*
Number is odd
Number is even
Number is odd
Number is even
Number is odd
Number is even
*/

//------------------------------------------
// Unary Minus Operator
//------------------------------------------
let three = 3
let minusThree = -three       // minusThree equals -3
let plusThree = -minusThree   // plusThree equals 3, or "minus minus three"
print(plusThree)
print( (-three == -3 && -three == minusThree) ? -three : "not equal") // ans: -3

//------------------------------------------
// Unary Plus Operator
//------------------------------------------
let minusSix = -6
let plusMinusSix = +minusSix  // ans: -6
print(plusMinusSix)

print( (+minusSix == +plusMinusSix) ? -minusSix : (String(+minusSix) + " != " + String(+plusMinusSix)))
// ans: 6


//------------------------------------------
// Compound Assignment Operators
//-----------------------------------------
/*
‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ï‡∏±‡∏ß Operator ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö Assign ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏¢‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    (+=) ‡∏ö‡∏ß‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
    (-=) ‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
    (*=) ‡∏Ñ‡∏π‡∏ì‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
    (/=) ‡∏´‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
    (%=) mod ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
*/
var (CompoundVarA, CompoundVarB, CompoundVarC) = (100, 200, 300)

CompoundVarA += CompoundVarB + CompoundVarC // 100 + (200+300)
print(CompoundVarA) // ans: 600

var score = 95
/*
(+=) Addition:
score -= 5 // ans: 90

(-=) Subtraction:
score += 5 // ans: 100

(*=) Multiply:
score += 5 // ans: 475

(/=) Divide:
score += 5 // ans: 19

(%=) Modulus:
score += 5 // ans: 0
*/

var quote = "roses are red violets are "
quote += "blue"
print(quote) // ans: roses are red violets are blue

/* error

var quote = "roses are red violets are "
quote -= "red"
‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ä‡∏ô‡∏¥‡∏î String ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ -= ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏î‡πâ
error*/

var hoursWork = 10
var price = 50.0
var income = 0.0

if hoursWork > 8 {
  let OT = (Double(hoursWork)/2) * (50 * 0.8)
  income += OT
}

income += Double(hoursWork) * 25
print(income)
//ans : 450.0


//------------------------------------------
// Comparison Operators
//------------------------------------------
/*
Comparison Operators ‡∏à‡∏∞ return ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Bool(Boolean)
    Equal to (a == b)
    Not equal to (a != b)
    Greater than (a > b)
    Less than (a < b)
    Greater than or equal to (a >= b)
    Less than or equal to (a <= b)

*/

var ComparisonVarA = 5, ComparisonVarB = 2

// 5 == 2
print(ComparisonVarA == ComparisonVarB) // false

// 5 != 2
print(ComparisonVarA != ComparisonVarB) // true

// 5 > 2
print(ComparisonVarA > ComparisonVarB) // true

// 5 < 2
print(ComparisonVarA < ComparisonVarB) // false

// 5 >= 2
print(ComparisonVarA >= ComparisonVarB) // true

//5 <= 2
print(ComparisonVarA <= ComparisonVarB) // false


var ‰∏∫ = "‰∏∫"
var Êó•Êú¨ = "Êó•Êú¨"

print("‰∏∫ == Êó•Êú¨ üçé\(‰∏∫ == Êó•Êú¨)") // ‰∏∫ == Êó•Êú¨ üçéfalse
print("‰∏∫ != Êó•Êú¨ üçé\(‰∏∫ != Êó•Êú¨)") // ‰∏∫ != Êó•Êú¨ üçétrue
print("‰∏∫ > Êó•Êú¨ üçé\(‰∏∫ > Êó•Êú¨)") // ‰∏∫ > Êó•Êú¨ üçéfalse
print("‰∏∫ < Êó•Êú¨ üçé\(‰∏∫ < Êó•Êú¨)") // ‰∏∫ < Êó•Êú¨ üçétrue
print("‰∏∫ >= Êó•Êú¨ üçé\(‰∏∫ >= Êó•Êú¨)") // ‰∏∫ >= Êó•Êú¨ üçéfalse
print("‰∏∫ <= Êó•Êú¨ üçé\(‰∏∫ <= Êó•Êú¨)") // ‰∏∫ <= Êó•Êú¨ üçétrue


/*
Swift also provides two identity operators (=== and !==), which you use to test whether two object references both refer to the same object instance
‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤ reference ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏à‡∏∞‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á object1 ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
*/

// Comparison ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á if
let myApple = "apple"
if myApple == "üçé" {
    print("that's my apple!")
}else {
    print("üçé isn't my \(myApple)")
}

/*



    You can‚Äôt add or remove items from a tuple; they are fixed in size.
    You can‚Äôt change the type of items in a tuple; they always have the same types they were created with.
    You can access items in a tuple using numerical positions or by naming them, but Swift won‚Äôt let you read numbers or names that don‚Äôt exist.


 Tuples Comparison
‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏π‡πà ‡∏ñ‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡∏±‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    (1, "zebra") < (2, "apple")   // true because 1 is less than 2; "zebra" and "apple" aren't compared
    (3, "apple") < (3, "bird")    // true because 3 is equal to 3, and "apple" is less than "bird"
    (4, "dog") == (4, "dog")      // true because 4 is equal to 4, and "dog" is equal to "dog"
    ("blue", -1) < ("purple", 1)        // OK, evaluates to true
    ("blue", false) < ("purple", true)  // Error because < can't compare Boolean values

*/
let tupleSetA: (String, Double, Bool) = ("1", 2, false)
let tupleSetB = ("3", -4.0, true)

print(tupleSetA.0 < tupleSetB.0) // true
print((tupleSetA.0, tupleSetA.1) < (tupleSetB.0, tupleSetB.1)) // true
// print((tupleSetA.0, tupleSetA.2) < (tupleSetB.0, tupleSetB.2)) // *error* bool ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πá‡∏à

print(tupleSetA.1 < tupleSetB.1) // false
// print(tupleSetA.1 < tupleSetB.2) // error ‡∏Ñ‡∏ô‡∏•‡∏∞ DataType(Double, Bool)
print(tupleSetA.2 == tupleSetB.2) // false


//------------------------------------------
// Ternary Conditional Operator
//------------------------------------------
/*
‡πÄ‡∏õ‡πá‡∏ô operator ‡∏ó‡∏µ‡πà‡∏°‡∏µ 3 ‡∏™‡πà‡∏ß‡∏ô
condition ? expression1 : expression2
‡∏´‡∏£‡∏∑‡∏≠
condition ? true_expression : false_expression
‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á if
‡∏ñ‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô "‡∏à‡∏£‡∏¥‡∏á" ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô expression1
‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô "‡πÄ‡∏ó‡πá‡∏à" ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô expression2 ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Ternary Conditional
*/

 var TernaryCondition: Bool
 var TernaryExpressionOne = 1
 var TernaryExpressionFifteen = 15
 var TernaryExpressionOnehundred = 100
 var TernaryResult: Int
 
TernaryCondition = true
    if TernaryCondition {
        TernaryResult = TernaryExpressionOne + TernaryExpressionFifteen
    } else {
        TernaryResult = TernaryExpressionOne + TernaryExpressionFifteen
    }

    print(TernaryResult) // ans: 16


// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏¢‡πà‡∏≠‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏Ç‡∏≠‡∏á Ternary Condition Operator
TernaryResult = TernaryExpressionOne +
            (TernaryCondition ? TernaryExpressionFifteen : TernaryExpressionOnehundred)
print(TernaryResult) // ans: 16


var direction = true
var sign = direction ? 1 : -1
print(sign) // ans: 1

var left: (Bool, String) =  (true, "left")
var right: (Bool, String) = (false, "right")
var wantToGo: Bool = true
print("go \(((wantToGo && left.0) || (wantToGo && right.0)) ? left.1 : right.1)")
// go left


let constNumberTen = 10
let constNumberTwenty = 20

let sumOfTenAndTwenty = (constNumberTen>constNumberTwenty) ?
("constNumberTen > constNumberTwenty") : ("constNumberTwenty > constNumberTen")

print(sumOfTenAndTwenty) // ans: constNumberTwenty > constNumberTen


//------------------------------------------
// Nil-Coalescing Operator
//------------------------------------------
/*
Nil-Coalescing ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤ dataType ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å assign ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤(Value)‡πÄ‡∏™‡∏°‡∏≠
‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
(a ?? b) a ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô "optional" ‡∏ñ‡πâ‡∏≤ a ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ unwrap a ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
‡∏ñ‡πâ‡∏≤ a ‡πÄ‡∏õ‡πá‡∏ô nil ‡∏à‡∏∞ unwrap ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô b ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ó‡∏ô a
‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ
a != nil ? a! : b

*/

var optionalNillCoalescing: String?   // defaults to nil
let defaultNillCoalescing = "default value"

var resultNillCoalescing = optionalNillCoalescing ?? defaultNillCoalescing
print(resultNillCoalescing)
// ans: default value

optionalNillCoalescing = "optional value"
resultNillCoalescing = optionalNillCoalescing ?? defaultNillCoalescing

print(resultNillCoalescing)
// ans: optional value


let nilOptionalStringName: String? = nil
let unwrappedName = nilOptionalStringName ?? "Godzila"

print(unwrappedName) // ans: Godzila

// ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Nil-Coalescing ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
print("My name is \(nilOptionalStringName ?? "Godzila")!")
// ans: My name is Godzila!

//------------------------------------------
// Range Operators
//------------------------------------------
/*
Range Operators ‡∏°‡∏µ 3 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    (a‚Ä¶b) (Closed Range Operator) ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà a ‡∏ñ‡∏∂‡∏á b ‡∏°‡∏±‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö for-loop
    (a..<b) (Half-Open Range Operator) ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà a ‡πÑ‡∏õ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á b ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° b ‡∏°‡∏±‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö for-loop, arrays
    [a‚Ä¶] (One-Sided Range Operator) ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏õ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏≠‡∏µ‡∏Å‡∏î‡πâ‡∏≤‡∏ô
*/
    //------------------------------------------
    // Closed Range Operator
    //------------------------------------------

    /*
    (a...b) ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà a ‡πÑ‡∏õ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á b ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á a ‡πÅ‡∏•‡∏∞ B ‡∏î‡πâ‡∏ß‡∏¢
    ‡πÇ‡∏î‡∏¢‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á a ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ b

    Closed range operator ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏™‡πç‡∏≤‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô for-in loop
    */
        
    for index in 1...5 {
        print("\(index) times 5 is \(index * 5)")
    }
    // 1 times 5 is 5
    // 2 times 5 is 10
    // 3 times 5 is 15
    // 4 times 5 is 20
    // 5 times 5 is 25
    
    for i in (-1...2){
        print(i)
    }
    /*
        -1
        0
        1
        2
    */

    let minOfArray = 1
    let maxOfArray = 3
    var someArray = [Int](minOfArray...maxOfArray)

    print(someArray) // ans: [1, 2, 3]

    // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏õ‡πá‡∏ô Closed Range
    let closedRangeDouble: ClosedRange<Double> = -1...3.6

    print(closedRangeDouble) // ans: -1...3.6
    print(closedRangeDouble.contains(3.6)) // ans: true
    // print(closedRangeDouble[0...]) // *error*

    //------------------------------------------
    // Half-Open Range Operator
    //------------------------------------------
    /*
    (a..<b) ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà a ‡πÑ‡∏õ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á b ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° b
    ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á a ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ b
    ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô arrays ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 0 ‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤ b ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á arrays
    */

    let closedRangeOneToThree = 0...3
    print(closedRangeOneToThree.count) // ans: 4

    let myArrayAE = ["a", "b", "c", "d", "e"]
    let myClosedRangeOneToThree: ClosedRange = 1...3
    let myCountableClosedRange: CountableClosedRange = 1...3

    print(myArrayAE[closedRangeOneToThree])
    // ans: ["a", "b", "c", "d"]
    print(myArrayAE[myClosedRangeOneToThree])
    // ans: ["b", "c", "d"]

    // for index in closedRangeOneToThree{ // *error*
    for index in myCountableClosedRange {
        print(myArrayAE[index])
    }
    /*
        b
        c
        d
    */


    let halfOpenRange = 0..<10
    print(halfOpenRange.count) // ans: 10


    let names = ["Anna", "Alex", "Brian", "Jack"]
    let count = names.count
    for i in 0..<count {
        print("Person \(i + 1) is called \(names[i])")
    }
    // result 
    // Person 1 is called Anna
    // Person 2 is called Alex
    // Person 3 is called Brian
    // Person 4 is called Jack

    let num = [1,3,4,6]
    for data in num {
    print(data)
    }
    // result 
    // 1
    // 3
    // 4
    // 6

    if (0..<5).contains(5) {
    print("5 ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á (0..<5)")
    }else{
    print("5 ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á (0..<5)")
    }
    // ans: 5 ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á (0..<5)

    var numbers = [1,2,3,4,5]
    print("\(numbers)") // ans: [1, 2, 3, 4, 5]
    print(numbers.count) // ans: 5

    for index in 0..<numbers.count {
        print(numbers[index])
    }
    /*
        1
        2
        3
        4
        5
    */

    let numbersArrays = [10, 20, 30, 40, 50, 60, 70]
    print(numbersArrays[0...3]) // ans: [10, 20, 30, 40]

    //------------------------------------------
    // One-Sided Ranges
    //------------------------------------------
    /*
    ‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏à‡∏ö ‡πÇ‡∏î‡∏¢‡∏ó‡∏¥‡πâ‡∏á‡∏≠‡∏µ‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô infinite
    ‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 2 ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏∑‡∏≠
    1.‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà "‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏" ‡πÑ‡∏õ "‡∏à‡∏ô‡∏à‡∏ö" [2...] 
    2."‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô" ‡πÑ‡∏õ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á "‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏" [...2]
    */

    let fruits = [
                    "apple",
                    "orange",
                    "melon",
                    "lime"
                    ]

    print(fruits[...2]) // ans: ["apple", "orange", "melon"]

    print(fruits[2...]) // ["melon", "lime"]

    print(fruits[..<2]) // ["apple", "orange"]

    print(fruits[..<(2+1)]) // ["apple", "orange", melon]

    let one = 1
    print(fruits[one...]) // ["orange", "melon", "lime"]


    for name in names[2...] {
        print(name)
    }
    // Brian
    // Jack

    for name in names[...2] {
        print(name)
    }
    // Anna
    // Alex
    // Brian

    // half-open range ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ one-sided ‡∏£‡πà‡∏ß‡∏°‡πÑ‡∏î‡πâ
    print("\n")
    for name in names[..<2] {
    print(name)
    }
    // Anna
    // Alex

    // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏õ‡πá‡∏ô One-sideed range

    let zeroToFive = 0.0..<5.0

    print(zeroToFive.contains(3.14)) // ans: true
    print(zeroToFive.contains(6.28)) // ans: false
    print(zeroToFive.contains(5.0)) // ans: false

    let empty = 0.0..<0.0
    empty.contains(0.0) // ans: false

    let range1 = ..<2
    print(range1.contains(-1)) // ans: true

    let range2 = 2...
    print(range2.contains(33)) // ans: true

    // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ contains ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÑ‡∏î‡πâ
    let range = ...5 // ‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏°‡∏≤‡∏à‡∏ô‡∏ñ‡∏∂‡∏á 5
    print(type(of:range)) // ans: PartialRangeThrough<Int>
    print(range.contains(7))   // ans: false
    print(range.contains(4))   // ans: true
    print(range.contains(-1))  // ans: true

    let maximumAge = 50
    let minimumAge = 12
    let myAge = 52

    print((minimumAge...maximumAge).contains(myAge)) // ans: false
    print((...maximumAge).contains(myAge)) // ans: false
    print((minimumAge...).contains(myAge)) // ans: true



//------------------------------------------
// Logical Operators
//------------------------------------------

/*
‡∏±‡∏ï‡∏±‡∏ß‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Boolean ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô true ‡∏´‡∏£‡∏∑‡∏≠ false
    Logical NOT (!a)
    Logical AND (a && b)
    Logical OR (a || b)

*/


//------------------------------------------
// Logical NOT Operator
//------------------------------------------

/*
‡∏ï‡∏±‡∏ß‡∏î‡πç‡∏≤‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏ï‡∏£‡∏£‡∏Å‡∏∞ NOT (!a) ‡∏≠‡πà‡∏≤‡∏ô‡∏ß‡πà‡∏≤ ‚Äúnot a‚Äù ‡πÄ‡∏õ‡∏•‡∏µC‡∏¢‡∏ô Boolean ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ true ‡πÄ‡∏õ‡πá‡∏ô false
‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µC‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å false ‡πÄ‡∏õ‡πá‡∏ô true ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà
*/

    print(!true) // ans: false

    let allowedEntry = false
    // allowedEntry = false
    // !allowEntry = true

    if !allowedEntry {
    // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤ if not allowEntry ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å allowedEntry ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô false
        print("ACCESS DENIED")
    }
    // Prints "ACCESS DENIED"



let myTrue = true
let myFalse = false

var myNotLogical = !myTrue
print(myNotLogical) // ans: false
print(!myNotLogical) // ans: true

var „ÅÑ„Å°„Åî  = true
var „Éã„Ç≥  = false

print("!„ÅÑ„Å°„Åî üçé\(!„ÅÑ„Å°„Åî)") // !„ÅÑ„Å°„Åî üçéfalse
print("!„Éã„Ç≥ üçé\(!„Éã„Ç≥)") // !„Éã„Ç≥ üçétrue


//------------------------------------------
// Logical AND Operator
//------------------------------------------

/*
(a && b) ‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πá‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á a ‡πÅ‡∏•‡∏∞ b ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô true
‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤ a ‡∏´‡∏£‡∏∑‡∏≠ b ‡∏ï‡∏±‡∏ß‡πÉ‡∏î‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô false ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô false
‡∏ñ‡πâ‡∏≤‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå a ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô false ‡∏ï‡∏±‡∏ß b ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ 
*/

print(true && true) // ans: true
print(true && false) // ans: false


let enteredDoorCode = true
let passedRetinaScan = false
if enteredDoorCode && passedRetinaScan { // true (and) false = false
    print("Welcome!")
} else {
    print("ACCESS DENIED")
}
// Prints "ACCESS DENIED"

// ‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ä‡∏∏‡∏î‡πÄ‡∏Å‡πà‡∏≤
// let myTrue = true
// let myFalse = false

var myAndLogical = myTrue && myFalse
print(myAndLogical) // ans: false


var fiveItemsArrays : [Int] = [1, 2, 3, 4, 5]

print(type(of:fiveItemsArrays))
var maxFiveItemsArrays = fiveItemsArrays.max() ?? 90

print(maxFiveItemsArrays) // ans: 5
print(fiveItemsArrays.count) // ans: 5

if fiveItemsArrays.count > 0 && fiveItemsArrays.count < maxFiveItemsArrays {
    fiveItemsArrays[maxFiveItemsArrays-1] = 50
}else{
    fiveItemsArrays[fiveItemsArrays.count-1] = 20
}

print(fiveItemsArrays) // ans: [1, 2, 3, 4, 20]


var ten = 10
var twentyTwo = 22
var tenAndTwentyResult: Bool?

tenAndTwentyResult = ten < twentyTwo
print(tenAndTwentyResult) // ans: Optional(true)
print(tenAndTwentyResult == true) // ans: true
// print(tenAndTwentyResult && true) // *error*

print("„ÅÑ„Å°„Åî && „Éã„Ç≥ üçé\(„ÅÑ„Å°„Åî && „Éã„Ç≥)")
// „ÅÑ„Å°„Åî && „Éã„Ç≥ üçéfalse

//------------------------------------------
// Logical OR Operator
//------------------------------------------

/*
(a || b) ‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏°‡∏∑‡πà‡∏≠ a ‡∏´‡∏£‡∏∑‡∏≠ b ‡∏ï‡∏±‡∏ß‡πÉ‡∏î‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô true
*/

print(true || false) // ans: true

if (10 < 20) || (20 < 10) {
    print("true")
}else{
    print("false")
}
// ans: true

let hasDoorKey = false
let knowsOverridePassword = true
if hasDoorKey || knowsOverridePassword { // false (or) true == true
    print("Welcome!")
} else {
    print("ACCESS DENIED")
}
// Prints "Welcome!"

// ‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ä‡∏∏‡∏î‡πÄ‡∏Å‡πà‡∏≤
// let myTrue = true
// let myFalse = false

let myLogicalTrueOrFalse = myTrue || myFalse
print(myLogicalTrueOrFalse) // ans: true

var userHasCellularConnect = true
var userHasWifiConnect = false
if userHasCellularConnect || userHasWifiConnect {
    print("download video")
} else {
    print("can't download video")
}
// ans: download video

print("„ÅÑ„Å°„Åî || „Éã„Ç≥ üçé\(„ÅÑ„Å°„Åî || „Éã„Ç≥)") // „ÅÑ„Å°„Åî || „Éã„Ç≥ üçétrue

//------------------------------------------
// Combining Logical Operators
//------------------------------------------

/*
‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ã‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡πÅ‡∏£‡∏Å expression ‡∏ï‡∏±‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Short Circuit 
*/

// ‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á (true (and) false) (or) (false (or) true)
// ‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå‡∏Ñ‡∏π‡πà‡πÅ‡∏£‡∏Å‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô false
// ‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå‡∏Ñ‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô true
// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡∏™‡∏≠‡∏á‡∏û‡∏¥‡∏à‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô false ‡πÅ‡∏•‡∏∞ true ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö ‡∏°‡∏≤‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ (or) ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô true

var knowsPassword = true
var useFingerPrint = true
var useFaceID = true

if knowsPassword && useFingerPrint || knowsPassword && useFaceID {
    print("login success")
} else {
    print("access denied")
}
// ans: login success


//------------------------------------------
// Explicit Parentheses
//------------------------------------------

/*
‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏õ

‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô ‡∏ñ‡πâ‡∏≤ "‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö "‡∏ä‡πà‡∏ß‡∏¢

if knowsPassword && useFingerPrint || knowsPassword && useFaceID {...}

‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏∞‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö true ‡πÅ‡∏ï‡πà readability ‡∏à‡∏∞‡∏ï‡πà‡∏≥ ‡∏¢‡∏¥‡πà‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ô‡∏¥‡∏û‡∏à‡∏ô‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢


‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£ "‡πÉ‡∏™‡πà‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö" ‡∏ä‡πà‡∏ß‡∏¢

if (knowsPassword && useFingerPrint) || (knowsPassword && useFaceID) {...}

‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ readability ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏û‡∏¥‡∏û‡∏à‡∏ô‡πå‡∏Ñ‡∏π‡πà‡πÑ‡∏´‡∏ô‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Å‡∏±‡∏ö‡∏≠‡∏∞‡πÑ‡∏£

*/


